// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/mysqlIssueDemo.proto

package mysql_issue_demo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MysqlIssueDemo_Write_FullMethodName        = "/mysql_issue_demo.MysqlIssueDemo/Write"
	MysqlIssueDemo_GetAllStores_FullMethodName = "/mysql_issue_demo.MysqlIssueDemo/GetAllStores"
)

// MysqlIssueDemoClient is the client API for MysqlIssueDemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MysqlIssueDemoClient interface {
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	GetAllStores(ctx context.Context, in *GetAllStoresRequest, opts ...grpc.CallOption) (*GetAllStoresResponse, error)
}

type mysqlIssueDemoClient struct {
	cc grpc.ClientConnInterface
}

func NewMysqlIssueDemoClient(cc grpc.ClientConnInterface) MysqlIssueDemoClient {
	return &mysqlIssueDemoClient{cc}
}

func (c *mysqlIssueDemoClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, MysqlIssueDemo_Write_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlIssueDemoClient) GetAllStores(ctx context.Context, in *GetAllStoresRequest, opts ...grpc.CallOption) (*GetAllStoresResponse, error) {
	out := new(GetAllStoresResponse)
	err := c.cc.Invoke(ctx, MysqlIssueDemo_GetAllStores_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MysqlIssueDemoServer is the server API for MysqlIssueDemo service.
// All implementations must embed UnimplementedMysqlIssueDemoServer
// for forward compatibility
type MysqlIssueDemoServer interface {
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	GetAllStores(context.Context, *GetAllStoresRequest) (*GetAllStoresResponse, error)
	mustEmbedUnimplementedMysqlIssueDemoServer()
}

// UnimplementedMysqlIssueDemoServer must be embedded to have forward compatible implementations.
type UnimplementedMysqlIssueDemoServer struct {
}

func (UnimplementedMysqlIssueDemoServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedMysqlIssueDemoServer) GetAllStores(context.Context, *GetAllStoresRequest) (*GetAllStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStores not implemented")
}
func (UnimplementedMysqlIssueDemoServer) mustEmbedUnimplementedMysqlIssueDemoServer() {}

// UnsafeMysqlIssueDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MysqlIssueDemoServer will
// result in compilation errors.
type UnsafeMysqlIssueDemoServer interface {
	mustEmbedUnimplementedMysqlIssueDemoServer()
}

func RegisterMysqlIssueDemoServer(s grpc.ServiceRegistrar, srv MysqlIssueDemoServer) {
	s.RegisterService(&MysqlIssueDemo_ServiceDesc, srv)
}

func _MysqlIssueDemo_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlIssueDemoServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MysqlIssueDemo_Write_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlIssueDemoServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlIssueDemo_GetAllStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlIssueDemoServer).GetAllStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MysqlIssueDemo_GetAllStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlIssueDemoServer).GetAllStores(ctx, req.(*GetAllStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MysqlIssueDemo_ServiceDesc is the grpc.ServiceDesc for MysqlIssueDemo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MysqlIssueDemo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mysql_issue_demo.MysqlIssueDemo",
	HandlerType: (*MysqlIssueDemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _MysqlIssueDemo_Write_Handler,
		},
		{
			MethodName: "GetAllStores",
			Handler:    _MysqlIssueDemo_GetAllStores_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mysqlIssueDemo.proto",
}
